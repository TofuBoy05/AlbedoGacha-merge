import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
load_dotenv()
import pyrebase
import time
from datetime import date
TOKEN = os.getenv('TOKEN')

service = {
    
  "type": "service_account",
  "project_id": os.getenv('project_id'),
  "private_key_id": os.getenv('private_key_id'),
  "private_key": os.getenv('private_key'),
  "client_email": os.getenv('client_email'),
  "client_id": os.getenv('client_id'),
  "auth_uri": os.getenv('auth_uri'),
  "token_uri": os.getenv('token_uri'),
  "auth_provider_x509_cert_url": os.getenv('auth_provider_x509_cert_url'),
  "client_x509_cert_url": os.getenv('client_x509_cert_url')
}

config = {
    'apiKey': os.getenv('apiKey'),
    'authDomain': os.getenv('authDomain'),
    'projectId': os.getenv('projectId'),
    'storageBucket': os.getenv('storageBucket'),
    'messagingSenderId': os.getenv('messagingSenderId'),
    'appId': os.getenv('appId'),
    'measurementId': os.getenv('measurementId'),
    'databaseURL': os.getenv('databaseURL'),
    "serviceAccount": service

} 

firebase = pyrebase.initialize_app(config)
database = firebase.database()

class genshinTime(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("Genshin time is online.")
        
        # loop through accounts that was playing before bot went offline and check if they are still playing
        still_playing = database.child("boon").child("currently_playing").shallow().get().val()
        for player in still_playing:
            try:
                guild = self.bot.get_guild(980092176488886383)
                user = guild.get_member(int(player))
                try:
                    activity = user.activities[0].name
                except:
                    activity = None
                if activity != "Visual Studio Code":
                    year = date.today().strftime("%Y")
                    month = date.today().strftime("%m")
                    day = date.today().strftime("%d")
                    index_sessions = len(database.child("boon").child("playtime").child(player).child(year).child(month).child(day).shallow().get().val())
                    if database.child("boon").child("playtime").child(player).child(year).child(month).child(day).shallow().get().val():
                        time_now = int(time.time())
                        start_time = database.child("boon").child("playtime").child(player).child(year).child(month).child(day).child(index_sessions).child("start").get().val()
                        data = {"end": time_now, "duration": time_now - start_time}
                        database.child("boon").child("playtime").child(player).child(year).child(month).child(day).child(index_sessions).update(data)

            except Exception as e:
                print(e)

    @commands.Cog.listener()
    async def on_presence_update(self, before, after):
        if before.guild.id == 980092176488886383:
            print(latest_day)
            try:
                new_presence = after.activity.name
            except:
                new_presence = None
            
            try:
                old_presence = before.activity.name
            except:
                old_presence = None

            channel = self.bot.get_channel(980092177214504972)
            year = date.today().strftime("%Y")
            month = date.today().strftime("%m")
            day = date.today().strftime("%d")
            if new_presence == "Visual Studio Code" and old_presence != "Visual Studio Code":
                # add to the currently playing list
                database.child("boon").child("currently_playing").update({before.id: True})
                data = {"start": int(time.time()), "end": "Waiting"}
                try:
                    if database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).shallow().get().val():
                        index_sessions = len(database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).shallow().get().val())
                        database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).child(index_sessions).update(data)
                    if not database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).shallow().get().val():
                        database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).child(1).update(data)
                except Exception as e:
                    print(e)
            
            elif new_presence != "Visual Studio Code" and old_presence == "Visual Studio Code":
                database.child("boon").child("currently_playing").child(before.id).remove()
                try:
                    if database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).shallow().get().val():
                        index_sessions = len(database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).shallow().get().val())
                        start_time = database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).child(index_sessions).child("start").get().val()
                        end_time = int(time.time())
                        data = {"end": end_time, "duration": end_time - start_time}
                        empty = {"start": "Waiting", "end": "Waiting"}
                        database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).child(index_sessions).update(data)
                        database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).child(index_sessions + 1).update(empty)
                    elif not database.child("boon").child("playtime").child(after.id).child(year).child(month).child(day).shallow().get().val():
                        #The user started playing at the day before and stopped the day after
                        index_sessions = len(database.child("boon").child("playtime").child(after.id).child(year).child(month).child(int(day) -1).shallow().get().val())
                        latest_day = database.child("boon").child("playtime").child(after.id).child(year).child(month).shallow().get().val()[-1]
                        start_time = database.child("boon").child("playtime").child(after.id).child(year).child(month).child(int(day) -1).child(index_sessions).child("start").get().val()
                        end_time = int(time.time())
                        data = {"end": end_time, "duration": end_time - start_time}
                        empty = {"start": "Waiting", "end": "Waiting"}
                        database.child("boon").child("playtime").child(after.id).child(year).child(month).child(int(day) -1).child(index_sessions).update(data)
                except Exception as e:
                    print(e)

async def setup(bot):
    await bot.add_cog(genshinTime(bot))